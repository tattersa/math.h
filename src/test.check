#include "./s21_math.h"
#include <math.h>
#include <stdlib.h>
#test test_ceil

long double x = 3.2;
ck_assert_int_eq(s21_ceil(x), ceil(x));



#test test_ceil_2

long double x = -3.2;
ck_assert_int_eq(s21_ceil(x), ceil(x));



#test test_ceil_3

long double x = 0;
ck_assert_int_eq(s21_ceil(x), ceil(x));


#test test_fabs_1

long double x = -3.434;
ck_assert_int_eq(s21_fabs(x), fabs(x));


#test test_fabs_2

long double x = 7.898096089;
ck_assert_int_eq(s21_fabs(x), fabs(x));


#test test_fabs_3

long double x = 0;
ck_assert_int_eq(s21_fabs(x), fabs(x));

#test test_abs_1

long double x = -3.434;
ck_assert_int_eq(s21_abs(x), abs(x));


#test test_abs_2

long double x = 7.898096089;
ck_assert_int_eq(s21_abs(x), abs(x));


#test test_abs_3

long double x = 0;
ck_assert_int_eq(s21_abs(x), abs(x));


#test test_exp_1

long double x = -3.434;
ck_assert_int_eq(s21_exp(x), exp(x));

#test test_exp_2

long double x = 0;
ck_assert_int_eq(s21_exp(x), exp(x));


#test s21_log_test1
    double number = 0.0;
    ck_assert_ldouble_infinite(s21_log(number));
    ck_assert_double_infinite(log(number));


#test s21_log_test2
    double number = 0.0000001;
    ck_assert_ldouble_infinite(s21_log(number));
    ck_assert_double_infinite(log(0));


#test s21_log_test3
    ck_assert_ldouble_infinite(s21_log(S21_HUGE_VAL));
    ck_assert_double_infinite(log(S21_HUGE_VAL));


#test s21_log_test4
    ck_assert_ldouble_infinite(s21_log(S21_HUGE_VAL));
    ck_assert_double_infinite(log(S21_HUGE_VAL));


#test s21_log_test5
    double number = 1.0001;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test6
    double number = -1.0001;
    ck_assert_ldouble_nan(s21_log(number));
    ck_assert_double_nan(log(number));


#test s21_log_test7
    double number = 2;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test8
    double number = 1.5;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test9
    double number = 15;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test10
    double number = S21_ME + 1e-16;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test11
    double number = 0.9999;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test12
    double number = 100.5;
    ck_assert_ldouble_eq_tol(s21_log(number), (long double)log(number), EPS);


#test s21_log_test13
    for (double k = 1; k < 100; k += 13.2) {
        double a = s21_log(k);
        double b = log(k);
        ck_assert_double_eq_tol(a, b, 1e-6);
    }


#test s21_log_test14
    for (double k = 0.1; k < 4; k += 0.24) {
        double a = s21_log(k);
        double b = log(k);
        ck_assert_double_eq_tol(a, b, 1e-6);
    }


#test s21_log_test15
    for (double k = 0.1; k < 10000; k += 123) {
        double a = s21_log(k);
        double b = log(k);
        ck_assert_double_eq_tol(a, b, EPS);
    }


#test s21_log_test16
    for (double k = 0.000005; k < 1; k *= 5) {
        double a = s21_log(k);
        double b = log(k);
        ck_assert_double_eq_tol(a, b, EPS);
    }


#test s21_log_test17
    ck_assert_double_nan(s21_log(S21_NAN));


#test s21_log_test18
    ck_assert_double_eq(log(0), s21_log(0));


#test s21_log_test19
    ck_assert_double_nan(s21_log(-3));


#test s21_log_test20
    ck_assert_double_eq(log(INFINITY), s21_log(S21_HUGE_VAL));


#test s21_log_test21
    ck_assert_double_nan(s21_log(-S21_HUGE_VAL));


#test s21_log_test22
    ck_assert_double_eq(log(1), s21_log(1));


#test s21_log_test23
    ck_assert_double_eq_tol(log(2), s21_log(2), 1e-6);


#test s21_log_test24
    ck_assert_double_nan(s21_log(-S21_HUGE_VAL * 2));

#test s21_pow_test1
    double res1 = pow(2, 3);
    long double res2 = s21_pow(2, 3);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test2
    double res1 = pow(0, 0);
    long double res2 = s21_pow(0, 0);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test3
    double res1 = pow(3, -1);
    long double res2 = s21_pow(3, -1);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test4
    double res1 = pow(-5, 5);
    long double res2 = s21_pow(-5, 5);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test5
    long double res1 = pow(0.352342, 7);
    long double res2 = s21_pow(0.352342, 7);
    ck_assert_ldouble_eq_tol(res1, res2, EPS);


#test s21_pow_test6
    double res1 = pow(0.5, 1.245);
    long double res2 = s21_pow(0.5, 1.245);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test7
    double res1 = pow(0.99999, 0.99999);
    long double res2 = s21_pow(0.99999, 0.99999);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test8
    double res1 = pow(99, -0.99999);
    long double res2 = s21_pow(99, -0.99999);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test9
    double res1 = pow(99, -0.0001);
    long double res2 = s21_pow(99, -0.0001);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test10
    double res1 = pow(1, 10.000199999);
    long double res2 = s21_pow(1, 10.000199999);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test11
    double res1 = pow(1.0001, 10.000199999);
    long double res2 = s21_pow(1.0001, 10.000199999);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test12
    double res1 = pow(1.0001, -10.000199999);
    long double res2 = s21_pow(1.0001, -10.000199999);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test13
    double res1 = pow(-1.0001, -10.100199999);
    long double res2 = s21_pow(-1.0001, -10.100199999);
    ck_assert_ldouble_nan((long double)res1);
    ck_assert_ldouble_nan(res2);


#test s21_pow_test14
    double res1 = pow(S21_HUGE_VAL, -S21_HUGE_VAL);
    long double res2 = s21_pow(S21_HUGE_VAL, -S21_HUGE_VAL);
    ck_assert_ldouble_eq_tol(res1, res2, EPS);


#test s21_pow_test15
    double res1 = pow(-12.5, 5);
    long double res2 = s21_pow(-12.5, 5);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test16
    double res1 = pow(-12.5, 6);
    long double res2 = s21_pow(-12.5, 6);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test17
    double res1 = pow(0.0, 6);
    long double res2 = s21_pow(0.0, 6);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test18
    double res1 = pow(S21_HUGE_VAL, -2);
    long double res2 = s21_pow(S21_HUGE_VAL, -2);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_pow_test19
    ck_assert_double_eq_tol(pow(0.3123, 0.789456), s21_pow(0.3123, 0.789456), 1e-6);


#test s21_pow_test20
    ck_assert_double_eq_tol(pow(56.3, 0.3), s21_pow(56.3, 0.3), 1e-6);


#test s21_pow_test21
    ck_assert_double_eq(pow(1, 0), s21_pow(1, 0));


#test s21_pow_test22
    ck_assert_double_eq(pow(-1, 3), s21_pow(-1, 3));


#test s21_pow_test23
    ck_assert_double_eq(pow(-INFINITY, 3), s21_pow(-S21_HUGE_VAL, 3));


#test s21_pow_test24
    ck_assert_double_eq(pow(0, 0), s21_pow(0, 0));


#test s21_pow_test25
    ck_assert_double_eq(pow(0, -1), s21_pow(0, -1));


#test s21_pow_test26
    ck_assert_double_eq(pow(0, 1), s21_pow(0, 1));


#test s21_pow_test27
    ck_assert_double_eq(pow(INFINITY, 0), s21_pow(S21_HUGE_VAL, 0));


#test s21_pow_test28
    ck_assert_double_eq(pow(INFINITY, -1), s21_pow(S21_HUGE_VAL, -1));


#test s21_pow_test29
    ck_assert_double_nan(s21_pow(0, S21_NAN));


#test s21_pow_test30
    ck_assert_double_nan(s21_pow(S21_NAN, S21_NAN));


#test s21_pow_test31
    ck_assert_double_eq(pow(INFINITY, INFINITY), s21_pow(S21_HUGE_VAL, S21_HUGE_VAL));


#test s21_pow_test32
    ck_assert_double_nan(s21_pow(S21_NAN, S21_HUGE_VAL));


#test s21_pow_test33
    ck_assert_double_nan(s21_pow(S21_HUGE_VAL, S21_NAN));


#test s21_pow_test34
    ck_assert_double_nan(s21_pow(S21_NAN, -S21_HUGE_VAL));


#test s21_pow_test35
    ck_assert_double_nan(s21_pow(-S21_HUGE_VAL, S21_NAN));


#test s21_pow_test36
    ck_assert_double_eq(pow(2, INFINITY), s21_pow(2, S21_HUGE_VAL));


#test s21_pow_test37
    ck_assert_double_nan(s21_pow(-0.789456, -0.789456));


#test s21_pow_test38
    ck_assert_double_nan(s21_pow(-500.789456, -10.1354323));


#test s21_pow_test39
    ck_assert_double_nan(s21_pow(-500.789456, 34.13));


#test s21_pow_test40
    ck_assert_double_eq_tol(pow(10.789456, 3.13), s21_pow(10.789456, 3.13), 1e-2);


#test s21_pow_test41
    ck_assert_double_eq_tol(pow(-1, -S21_HUGE_VAL), s21_pow(-1, -S21_HUGE_VAL), EPS);


#test s21_pow_test42
    ck_assert_double_eq_tol(pow(0, S21_HUGE_VAL), s21_pow(0, S21_HUGE_VAL), EPS);


#test s21_pow_test43
    double res1 = pow(-S21_HUGE_VAL, -2);
    long double res2 = s21_pow(-S21_HUGE_VAL, -2);
    ck_assert_ldouble_eq_tol((long double)res1, res2, EPS);


#test s21_acos_test2
    for (double i = -1.000000; i <= 1; i += 0.00005)
        ck_assert_ldouble_eq_tol(acos(i), s21_acos(i), 1e-6);



#test s21_acos_test3
    ck_assert_ldouble_nan(s21_acos(-S21_HUGE_VAL));


#test s21_acos_test5
    for (double i = -1.000000; i <= 1.000000; i += 0.0001)
        ck_assert_ldouble_eq_tol(acos(i), s21_acos(i), 1e-6);


#test s21_acos_test6
    ck_assert_ldouble_nan(s21_acos(S21_NAN));


#test s21_acos_test7
    ck_assert_ldouble_nan(s21_acos(-1.0/0.0));


#test s21_acos_test8
    ck_assert_ldouble_nan(s21_acos(6.654));


#test s21_acos_test9
    ck_assert_ldouble_nan(s21_acos(1.5 * S21_PI));


#test s21_acos_test10
    ck_assert_ldouble_eq_tol(acos(0.00001), s21_acos(0.00001), 1e-6);


#test s21_atan_test1
    ck_assert_ldouble_eq_tol(atan(500.000), s21_atan(500.000), 1e-4);


#test s21_atan_test2
    for (double i = -565.324; i <= 789.532; i += 50.6235)
        ck_assert_ldouble_eq_tol(atan(i), s21_atan(i), 1e-6);


#test s21_atan_test4
    ck_assert_ldouble_eq_tol(atan(-1.0/0.0), s21_atan(-1.0/0.0), 1e-7);


#test s21_atan_test5
    ck_assert_ldouble_eq_tol(atan(0.0), s21_atan(0.0), 1e-7);


#test s21_atan_test6
    ck_assert_ldouble_nan(s21_atan(0.0/0.0));


#test s21_atan_test7
    ck_assert_ldouble_eq_tol(atan(0.0), s21_atan(0.0), 1e-7);


#test s21_atan_test8
    for (double i = -123456.789456; i <= 123456.789456; i += 1.0)
        ck_assert_ldouble_eq_tol(atan(i), s21_atan(i), 1e-7);


#test s21_atan_test9
    ck_assert_ldouble_eq_tol(atan(INFINITY), s21_atan(S21_HUGE_VAL), 1e-7);


#test s21_atan_test10
    ck_assert_ldouble_eq_tol(atan(-2.78965), s21_atan(-2.78965), 1e-7);

#test s21_asin_test1
    for (double i = -1.000000; i <= 1.000000; i += 0.00005)
        ck_assert_ldouble_eq_tol(asin(i), s21_asin(i), 1e-6);


#test s21_asin_test2
    for (double i = -1.000000; i <= 1.000000; i += 0.00005)
        ck_assert_ldouble_eq_tol(asin(i), s21_asin(i), 1e-6);

#test s21_asin_test3
    ck_assert_ldouble_nan(s21_asin(S21_NAN)); 


#test s21_asin_test5
    ck_assert_ldouble_eq_tol(asin(-1), s21_asin(-1), 1e-6);


#test s21_asin_test6
    for (double i = -1.000000; i <= 1.000000; i += 0.00005)
        ck_assert_ldouble_eq_tol(asin(i), s21_asin(i), 1e-6);


#test s21_asin_test7
    ck_assert_ldouble_eq_tol(asin(0), s21_asin(0), 1e-6);


#test s21_asin_test8
    ck_assert_ldouble_nan(s21_asin(INFINITY));


#test s21_asin_test9
    ck_assert_ldouble_nan(s21_asin(-INFINITY));


#test s21_asin_test10
    ck_assert_ldouble_nan(s21_asin(-252.568));


#test s21_asin_test11
    ck_assert_ldouble_nan(s21_asin(555));


#test s21_exp_test1
    double number = 0.0;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test2
    double number = -0.0;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test3
    double number = 1.0;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test4
    double number = 1.1111;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test5
    double number = -1.1111;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test6
    double number = 10;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test7
    double number = -10;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test8
    double number = -1.9999999;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test9
    double number = 1.9999999;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test10
    double number = -0.9999999;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test11
    double number = 0.9999999;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test12
    ck_assert_ldouble_nan(s21_exp(S21_NAN));
    ck_assert_double_nan(exp(S21_NAN));


#test s21_exp_test13
    ck_assert_ldouble_infinite(s21_exp(S21_HUGE_VAL));
    ck_assert_double_infinite(exp(S21_HUGE_VAL));


#test s21_exp_test14
    ck_assert_ldouble_eq(s21_exp(-S21_HUGE_VAL), 0.0);
    ck_assert_ldouble_eq(exp(-S21_HUGE_VAL), 0.0);


#test s21_exp_test15
    double number = 5.5;
    ck_assert_ldouble_eq_tol(s21_exp(number), (long double)exp(number), EPS);


#test s21_exp_test16
    ck_assert_double_eq_tol(s21_exp(3.3333), s21_exp(3.3333), EPS);


#test s21_exp_test17
    ck_assert_double_eq_tol(s21_exp(-5.5), s21_exp(-5.5), EPS);


#test s21_exp_test18
    ck_assert_double_eq(s21_exp(4566.7899), s21_exp(4566.7899));


#test s21_exp_test19
    ck_assert_double_nan(s21_exp(NAN));


#test s21_exp_test20
    ck_assert_double_eq(exp(INFINITY), s21_exp(INFINITY));


#test s21_exp_test21
    ck_assert_double_eq_tol(exp(0.4564), s21_exp(0.4564), EPS);


#test s21_exp_test22
    ck_assert_double_eq(exp(0), s21_exp(0));


#test s21_exp_test23
    ck_assert_double_eq_tol(exp(-45.11), s21_exp(-45.11), EPS);


#test s21_exp_test24
    ck_assert_double_eq_tol(exp(-1), s21_exp(-1), EPS);


#test s21_exp_test25
    ck_assert_double_eq_tol(exp(-0.000001), s21_exp(-0.000001), EPS);


#test s21_exp_test26
    for (double i = -2.7863; i <= 2.6831; i += 0.001)
        ck_assert_double_eq_tol(exp(i), s21_exp(i), EPS);

#test s21_floor_test1
    ck_assert_double_eq(floor(INFINITY), s21_floor(S21_HUGE_VAL));


#test s21_floor_test2
    ck_assert_double_eq(floor(-INFINITY), s21_floor(-S21_HUGE_VAL));


#test s21_floor_test3
    ck_assert_double_nan(floor(NAN));


#test s21_floor_test4
    ck_assert_double_nan(s21_floor(NAN));


#test s21_floor_test5
    ck_assert_int_eq(floor(-7.0), s21_floor(-7.0));


#test s21_floor_test6
    ck_assert_double_eq(floor(-98.1), s21_floor(-98.1));


#test s21_floor_test7
    ck_assert_double_eq(floor(123.02), s21_floor(123.02));


// #test s21_floor_test8
//     ck_assert_double_eq(floor(MAXFLOAT), s21_floor(MAXFLOAT));


#test s21_floor_test9
    ck_assert_double_eq(floor(-10009.555), s21_floor(-10009.555));


#test s21_floor_test10
    ck_assert_double_eq(floor(-0.10009), s21_floor(-0.10009));


#test s21_floor_test11
    ck_assert_double_eq(floor(-1e-23), s21_floor(-1e-23));


#test s21_floor_test12
    ck_assert_double_eq(floor(100091234.5), s21_floor(100091234.5));


#test s21_floor_test13
    ck_assert_double_eq(floor(7), s21_floor(7));


#test s21_floor_test14
    ck_assert_double_eq(floor(0), s21_floor(0));


#test s21_floor_test15
    ck_assert_double_eq(floor(0.0), s21_floor(0.0));

#test s21_sqrt_test1
    ck_assert_ldouble_eq_tol(sqrt(12345), s21_sqrt(12345), EPS);


#test s21_sqrt_test2
    ck_assert_ldouble_eq_tol(sqrt(0.0), s21_sqrt(0.0), EPS);


#test s21_sqrt_test3
    ck_assert_ldouble_eq_tol(sqrt(0.01), s21_sqrt(0.01), EPS);


#test s21_sqrt_test4
    ck_assert_ldouble_eq_tol(sqrt(0.00001), s21_sqrt(0.00001), EPS);


#test s21_sqrt_test5
    ck_assert_ldouble_nan(s21_sqrt(-0.00001));


#test s21_sqrt_test6
    ck_assert_ldouble_nan(s21_sqrt(-1));


#test s21_sqrt_test7
    ck_assert_ldouble_eq_tol(sqrt(2), s21_sqrt(2), EPS);


#test s21_sqrt_test8
    ck_assert_ldouble_eq_tol(sqrt(121), s21_sqrt(121), EPS);


#test s21_sqrt_test9
    ck_assert_ldouble_eq_tol(sqrt(1244.12414), s21_sqrt(1244.12414), EPS);


#test s21_sqrt_test10
    ck_assert_ldouble_eq_tol(sqrt(1.21), s21_sqrt(1.21), EPS);


#test s21_sqrt_test11
    ck_assert_ldouble_eq_tol(sqrt(0.999998), s21_sqrt(0.999998), EPS);


#test s21_sqrt_test12
    ck_assert_double_eq_tol(s21_sqrt(233), sqrt(233), 1e-6);


#test s21_sqrt_test13
    ck_assert_double_nan(s21_sqrt(S21_NAN));


#test s21_sqrt_test14
    ck_assert_double_nan(sqrt(NAN));


#test s21_sqrt_test15
    ck_assert_double_eq(s21_sqrt(S21_HUGE_VAL), sqrt(INFINITY));


#test s21_sqrt_test16
    ck_assert_double_nan(s21_sqrt(-S21_HUGE_VAL));


#test s21_sqrt_test17
    ck_assert_double_nan(sqrt(-INFINITY));


#test s21_sqrt_test18
    ck_assert_double_nan(s21_sqrt(-5));


#test s21_sqrt_test19
    ck_assert_double_nan(sqrt(-0.000001));


#test s21_sqrt_test20
    ck_assert_double_eq_tol(s21_sqrt(1000), sqrt(1000), 1e-7);


#test s21_sqrt_test21
    ck_assert_double_eq_tol(s21_sqrt(0.000001), sqrt(0.000001), 1e-7);

#test s21_tan_test1
    ck_assert_ldouble_eq_tol(tan(0.123456), s21_tan(0.123456), EPS);


#test s21_tan_test2
    ck_assert_ldouble_nan(s21_tan(S21_NAN));


#test s21_tan_test3
    ck_assert_ldouble_nan(s21_tan(S21_HUGE_VAL));


#test s21_tan_test4
    ck_assert_ldouble_nan(s21_tan(-S21_HUGE_VAL));


#test s21_tan_test5
    ck_assert_ldouble_eq_tol(tan(-0.123456), s21_tan(-0.123456), EPS);

#test s21_tan_test6
    ck_assert_ldouble_eq_tol(tan(11115.123456), s21_tan(11115.123456), EPS);


#test s21_tan_test7s
    ck_assert_ldouble_eq_tol(tan(-11115.123456), s21_tan(-11115.123456), EPS);


#test s21_tan_test8
    ck_assert_ldouble_eq_tol(tan(0.000001), s21_tan(0.000001), EPS);


#test s21_tan_test9
    ck_assert_ldouble_eq_tol(tan(-0.0), s21_tan(-0.0), EPS);


#test s21_tan_test10
    ck_assert_ldouble_nan(s21_tan(-0.0/0.0));


#test s21_tan_test11
    for (double i = 1.0; i >= -1.0; i -= 0.0001)
        ck_assert_ldouble_eq_tol(tan(i), s21_tan(i), EPS);
